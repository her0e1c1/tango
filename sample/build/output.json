[{"frontText": "Find the smallest x such that x^2 >= n\n\nPlease don't use bisect", "backText": "import pytest\n\n\ndef find_min_x(n):\n    lo, hi = 0, 2**32\n    while lo < hi:\n        mi = (lo + hi) // 2\n        if mi * mi >= n:\n            hi = mi\n        else:\n            lo = mi + 1\n    return hi\n\n\n@pytest.mark.parametrize(\n    \"args,expected\",\n    [\n        [[0], 0],\n        [[1], 1],\n        [[8], 3],\n        [[9], 3],\n        [[10], 4],\n        [[(n := 123456789) * n - 1], n],\n        [[n * n], n],\n        [[n * n + 1], n + 1],\n    ],\n)\ndef test(args, expected):\n    assert find_min_x(*args) == expected", "uniqueKey": "test/binarysearch/test_find_min_x.py", "tags": ["binarysearch"]}, {"frontText": "Returns True if a specified element exists in a sorted array of integers.", "backText": "import pytest\nfrom bisect import bisect_left\n\n\ndef has_element(sl, a):\n    i = bisect_left(sl, a)\n    return i < len(sl) and sl[i] == a\n\n\n@pytest.mark.parametrize(\n    \"args,expected\",\n    [\n        [[(nums := [10, 30, 50]), 0], False],\n        [[nums, 10], True],\n        [[nums, 20], False],\n        [[nums, 30], True],\n        [[nums, 40], False],\n        [[nums, 50], True],\n        [[nums, 60], False],\n    ],\n)\ndef test(args, expected):\n    assert has_element(*args) == expected", "uniqueKey": "test/binarysearch/test_has_element.py", "tags": ["binarysearch"]}, {"frontText": "Returns the number of a specified element in a sorted array of integers.", "backText": "import pytest\nfrom bisect import bisect_left, bisect_right\n\n\ndef count_elements(sl, a):\n    return bisect_right(sl, a) - bisect_left(sl, a)\n\n\n@pytest.mark.parametrize(\n    \"args,expected\",\n    [\n        [[(nums := [1, 1, 1, 3, 4, 4, 4, 5, 6, 6]), 0], 0],\n        [[nums, 1], 3],\n        [[nums, 2], 0],\n        [[nums, 3], 1],\n        [[nums, 4], 3],\n        [[nums, 5], 1],\n        [[nums, 6], 2],\n        [[nums, 7], 0],\n    ],\n)\ndef test(args, expected):\n    assert count_elements(*args) == expected", "uniqueKey": "test/binarysearch/test_count_elements.py", "tags": ["binarysearch"]}]